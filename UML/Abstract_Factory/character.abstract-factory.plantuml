@startuml
title Abstract Factory - Character Creation

interface IHunter {
}

interface IMage {
}

interface IFighter {
}

class OrcHunter implements IHunter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class HumanHunter implements IHunter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class ElfHunter implements IHunter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class OrcMage implements IMage{
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class HumanMage implements IMage {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class ElfMage implements IMage {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class OrcFighter implements IFighter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class HumanFighter implements IFighter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class ElfFighter implements IFighter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

interface ICharacterFactory {
    + IHunter createHunter()
    + IMage createMage()
    + IFighter createFighter()
}

class OrcFactory implements ICharacterFactory {
    + IHunter createHunter()
    + IMage createMage()
    + IFighter createFighter()
}

class HumanFactory implements ICharacterFactory {
    + IHunter createHunter()
    + IMage createMage()
    + IFighter createFighter()
}

class ElfFactory implements ICharacterFactory {
    + IHunter createHunter()
    + IMage createMage()
    + IFighter createFighter()
}

interface ICharacter {
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}


OrcFactory ..> OrcHunter
OrcFactory ..> OrcMage
OrcFactory ..> OrcFighter

HumanFactory ..> HumanHunter
HumanFactory ..> HumanMage
HumanFactory ..> HumanFighter

ElfFactory ..> ElfHunter
ElfFactory ..> ElfMage
ElfFactory ..> ElfFighter

HumanHunter ..> ICharacter
HumanMage ..> ICharacter
HumanFighter ..> ICharacter

OrcHunter ..> ICharacter
OrcMage ..> ICharacter
OrcFighter ..> ICharacter

ElfHunter ..> ICharacter
ElfMage ..> ICharacter
ElfFighter ..> ICharacter

@enduml
