@startuml 
title Abstract Factory - Equipment Creation

!ifndef DIAGRAM
!define DIAGRAM

interface IEquipmentFactory {
  +createHead(): IHead
  +createTorso(): ITorso
  +createLegs(): ILegs
}

interface IHead {
}

interface ITorso {
}

interface ILegs {
}

class LightHead {
  -health: int
  -weight: int
  -speedBonus: int
}

class LightTorso {
  -health: int
  -weight: int
  -speedBonus: int
}

class LightLegs {
  -health: int
  -weight: int
  -speedBonus: int
}

class MediumHead {
  -health: int
  -weight: int
  -speedBonus: int
}

class MediumTorso {
  -health: int
  -weight: int
  -speedBonus: int
}

class MediumLegs {
  -health: int
  -weight: int
  -speedBonus: int
}

class HeavyHead {
  -health: int
  -weight: int
  -speedBonus: int
}

class HeavyTorso {
  -health: int
  -weight: int
  -speedBonus: int
}

class HeavyLegs {
  -health: int
  -weight: int
  -speedBonus: int
}

class LightEquipmentFactory {
  +createHead(): IHead
  +createTorso(): ITorso
  +createLegs(): ILegs
}

class MediumEquipmentFactory {
  +createHead(): IHead
  +createTorso(): ITorso
  +createLegs(): ILegs
}

class HeavyEquipmentFactory {
  +createHead(): IHead
  +createTorso(): ITorso
  +createLegs(): ILegs
}

IHead  <|-- LightHead
ILegs  <|-- LightLegs
ITorso <|-- LightTorso

IHead  <|-- MediumHead
ITorso <|-- MediumTorso
ILegs  <|-- MediumLegs

ILegs  <|-- HeavyLegs
IHead  <|-- HeavyHead
ITorso <|-- HeavyTorso

IEquipmentFactory <|-- LightEquipmentFactory
IEquipmentFactory <|-- MediumEquipmentFactory
IEquipmentFactory <|-- HeavyEquipmentFactory

LightEquipmentFactory --> LightHead : create
LightEquipmentFactory --> LightTorso : create
LightEquipmentFactory --> LightLegs : create

MediumEquipmentFactory --> MediumHead : create
MediumEquipmentFactory --> MediumTorso : create
MediumEquipmentFactory --> MediumLegs : create

HeavyEquipmentFactory --> HeavyHead : create
HeavyEquipmentFactory --> HeavyTorso : create
HeavyEquipmentFactory --> HeavyLegs : create

!endif

@enduml
