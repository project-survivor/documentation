@startuml
allowmixing

skinparam linetype ortho
skinparam nodesep 200
skinparam ranksep 80

interface IHunter {
}

interface IMage {
}

interface IFighter {
}

class OrcHunter implements IHunter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    -weapoon: IWeapon
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class HumanHunter implements IHunter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    -weapoon: IWeapon
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class ElfHunter implements IHunter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    -weapoon: IWeapon
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class OrcMage implements IMage{
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    -weapoon: IWeapon
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class HumanMage implements IMage {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    -weapoon: IWeapon
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class ElfMage implements IMage {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    -weapoon: IWeapon
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class OrcFighter implements IFighter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    -weapoon: IWeapon
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class HumanFighter implements IFighter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    -weapoon: IWeapon
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class ElfFighter implements IFighter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    -weapoon: IWeapon
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

interface ICharacterFactory {
    + IHunter createHunter()
    + IMage createMage()
    + IFighter createFighter()
}

class OrcFactory implements ICharacterFactory {
    + IHunter createHunter()
    + IMage createMage()
    + IFighter createFighter()
}

class HumanFactory implements ICharacterFactory {
    + IHunter createHunter()
    + IMage createMage()
    + IFighter createFighter()
}

class ElfFactory implements ICharacterFactory {
    + IHunter createHunter()
    + IMage createMage()
    + IFighter createFighter()
}

interface ICharacter {
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}


OrcFactory ..> OrcHunter
OrcFactory ..> OrcMage
OrcFactory ..> OrcFighter

HumanFactory ..> HumanHunter
HumanFactory ..> HumanMage
HumanFactory ..> HumanFighter

ElfFactory ..> ElfHunter
ElfFactory ..> ElfMage
ElfFactory ..> ElfFighter

HumanHunter ..> ICharacter
HumanMage ..> ICharacter
HumanFighter ..> ICharacter

OrcHunter ..> ICharacter
OrcMage ..> ICharacter
OrcFighter ..> ICharacter

ElfHunter ..> ICharacter
ElfMage ..> ICharacter
ElfFighter ..> ICharacter



interface IEquipmentFactory {
  +createHead(): IHead
  +createTorso(): ITorso
  +createLegs(): ILegs
}

interface IHead {
}

interface ITorso {
}

interface ILegs {
}

class LightHead {
  -health: int
  -weight: int
  -speedBonus: int
  +attach()
  +detach()
}

class LightTorso {
  -health: int
  -weight: int
  -speedBonus: int
  +attach()
  +detach()
}

class LightLegs {
  -health: int
  -weight: int
  -speedBonus: int
  +attach()
  +detach()
}

class MediumHead {
  -health: int
  -weight: int
  -speedBonus: int
  +attach()
  +detach()
}

class MediumTorso {
  -health: int
  -weight: int
  -speedBonus: int
  +attach()
  +detach()
}

class MediumLegs {
  -health: int
  -weight: int
  -speedBonus: int
  +attach()
  +detach()
}

class HeavyHead {
  -health: int
  -weight: int
  -speedBonus: int
  +attach()
  +detach()
}

class HeavyTorso {
  -health: int
  -weight: int
  -speedBonus: int
  +attach()
  +detach()
}

class HeavyLegs {
  -health: int
  -weight: int
  -speedBonus: int
  +attach()
  +detach()
}

class LightEquipmentFactory {
  +createHead(): IHead
  +createTorso(): ITorso
  +createLegs(): ILegs
}

class MediumEquipmentFactory {
  +createHead(): IHead
  +createTorso(): ITorso
  +createLegs(): ILegs
}

class HeavyEquipmentFactory {
  +createHead(): IHead
  +createTorso(): ITorso
  +createLegs(): ILegs
}

interface IEquipement {
  +attach()
  +detach()
}

ICharacter --> IEquipement

LightHead ..> IEquipement
LightTorso ..> IEquipement
LightLegs ..> IEquipement

MediumHead ..> IEquipement
MediumTorso ..> IEquipement
MediumLegs ..> IEquipement

HeavyHead ..> IEquipement
HeavyTorso ..> IEquipement
HeavyLegs ..> IEquipement

IHead  <|.. LightHead
ILegs  <|.. LightLegs
ITorso <|.. LightTorso

IHead  <|.. MediumHead
ITorso <|.. MediumTorso
ILegs  <|.. MediumLegs

ILegs  <|.. HeavyLegs
IHead  <|.. HeavyHead
ITorso <|.. HeavyTorso

IEquipmentFactory <|.. LightEquipmentFactory
IEquipmentFactory <|.. MediumEquipmentFactory
IEquipmentFactory <|.. HeavyEquipmentFactory

LightEquipmentFactory ..> LightHead 
LightEquipmentFactory ..> LightTorso 
LightEquipmentFactory ..> LightLegs 

MediumEquipmentFactory ..> MediumHead  
MediumEquipmentFactory ..> MediumTorso  
MediumEquipmentFactory ..> MediumLegs  

HeavyEquipmentFactory ..> HeavyHead 
HeavyEquipmentFactory ..> HeavyTorso  
HeavyEquipmentFactory ..> HeavyLegs 

class GameLevel {
    -enemies: List<String>
    -items: List<String>
    -decorations: List<String>
    +GameLevel()
    +addEnemy(enemy: String): void
    +addItem(item: String): void
    +addDecoration(decoration: String): void
    +display(): void
}

interface LevelBuilder {
    +reset(): void
    +addEnemies(enemies: List<String>)
    +addItems(items: List<String>)
    +addDecorations(decorations: List<String>)
    +build(): GameLevel
}

class ConcreteLevelBuilder {
    -level: GameLevel
    +ConcreteLevelBuilder()
    +reset(): void
    +addEnemies(enemies: List<String>)
    +addItems(items: List<String>)
    +addDecorations(decorations: List<String>)
    +build(): GameLevel
}

class LevelDirector {
    -builder: LevelBuilder
    +LevelDirector(builder: LevelBuilder)
    +make(type: LevelType): GameLevel
}

enum LevelType {
    Cave
    Dungeon
    Forest
    Castle
}

LevelDirector --> LevelType


GameLevel *-- LevelBuilder
LevelBuilder <|.. ConcreteLevelBuilder
LevelDirector --> LevelBuilder



interface Handler {
    + setNext(handler: Handler): Handler
    + handle(request: Request): void
}

abstract class BaseHandler implements Handler {
    - next: Handler
    + setNext(handler: Handler): Handler
    + handle(request: Request): void
}

class UserInputHandler extends BaseHandler {
    + handle(request: Request): void
}

class ValidationHandler extends BaseHandler {
    + handle(request: Request): void
}

class CommandHandler extends BaseHandler {
    + handle(request: Request): void
}

class DisplayHandler extends BaseHandler {
    + handle(request: Request): void
}

class Request {
    - input: String
    - command: String
    - isValid: boolean
    + Request(input: String)
    + getInput(): String
    + setInput(input: String): void
    + getCommand(): String
    + setCommand(command: String): void
    + isValid(): boolean
    + setValid(isValid: boolean): void
}


Handler --> Request
BaseHandler *--> Handler

interface Command {
    + execute()
}

class AttackCommand implements Command {
    - character: ICharacter
    - params: Params
    + AttackCommand(params Params)
    + execute()
}

class MoveCommand implements Command {
    - character: ICharacter
    - param: Param
    + MoveCommand(params Params)
    + execute()
}

class UseItemCommand implements Command {
    - character: ICharacter
    - param: Param
    + UseItemCommand(params Params)
    + execute()
}

class Invoker {
    - command: Command
    + setCommand(command: Command)
    + executeCommand()
}

class CommandHistory {
    - history: Command[]
    + push(c: Command)
    + pop(c: Command)
}

Invoker o-- Command
Invoker --> CommandHistory
CommandHistory *--> Command

AttackCommand o--> ICharacter
MoveCommand o--> ICharacter
UseItemCommand o--> ICharacter

abstract class CharacterDecorator implements ICharacter {
    -decoratedCharacter: ICharacter
    +CharacterDecorator(character: ICharacter)
    +attack(damage: int, target: IEnemy)
    +move(speed: int, direction: Direction)
    +useItem(item: Item)
}

class FirePowerDecorator extends CharacterDecorator {
    +FirePowerDecorator(character: ICharacter)
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
    +addFirePower(): void
}

class InvisibilityDecorator extends CharacterDecorator {
    +InvisibilityDecorator(character: ICharacter)
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
    +addInvisibility(): void
}

CharacterDecorator *--> ICharacter


abstract class SpellDecorator implements ISpell {
    -spell: ISpell
    +SpellDecorator(spell: ISpell)
    +cast()
    +render()  
}

class FireSpellDecorator {
    +FireSpellDecorator(spell: ISpell)
    +cast()
    +render() 
}

class WaterSpellDecorator {
    +WaterSpellDecorator(spell: ISpell)
    +cast()
    +render() 
}

class GroundSpellDecorator {
    +GroundSpellDecorator(spell: ISpell)
    +cast()
    +render() 
}

class AirSpellDecorator {
    +AirSpellDecorator(spell: ISpell)
    +cast()
    +render() 
}

ISpell <--o SpellDecorator

SpellDecorator <|-- FireSpellDecorator
SpellDecorator <|-- WaterSpellDecorator
SpellDecorator <|-- GroundSpellDecorator
SpellDecorator <|-- AirSpellDecorator

ICharacter --> ISpell

abstract class WeaponDecorator implements IWeapon {
    - decoratedWeapon: IWeapon
    + WeaponDecorator(weapon: IWeapon)
    + attack1()
    + attack2()
}

interface IWeapon {
    + attack1()
    + attack2()
}

class FireEnchantmentDecorator extends WeaponDecorator {
    + fireDamage : int
    + attack1()
    + attack2()
}

class WaterEnchantmentDecorator extends WeaponDecorator {
    + waterDamage : int
    + attack1()
    + attack2()
}

class GroundEnchantmentDecorator extends WeaponDecorator {
    + groundDamage : int
    + attack1()
    + attack2()
}

class AirEnchantmentDecorator extends WeaponDecorator {
    + airDamage : int
    + attack1()
    + attack2()
}

WeaponDecorator *--> IWeapon 
ICharacter --> IWeapon


interface ICollectible {
    +collect()
}

class Coin {
    +collect()
}

class Experience {
    +collect()
}

abstract class ICollectibleFactory {
    +createCollectible()
}

class CoinFactory {
    +createCollectible()
}

class ExperienceFactory {
    +createCollectible()
}

ICollectible <|-- Coin
ICollectible <|-- Experience

ICollectibleFactory <|-- CoinFactory
ICollectibleFactory <|-- ExperienceFactory

ICollectibleFactory ..> ICollectible : creates

class Zombie {
    -x: int
    -y: int
    -type: EnemyType
    -behavior: EnemyBehavior
    +setBehavior(behavior: EnemyBehavior): void
    +performAction(): void
    +abstract attack(): void
    +clone(): IEnemy
}

class Vampire {
    -x: int
    -y: int
    -type: EnemyType
    -behavior: EnemyBehavior
    +setBehavior(behavior: EnemyBehavior): void
    +performAction(): void
    +abstract attack(): void
    +clone(): IEnemy
}

class Werewolf {
    -x: int
    -y: int
    -type: EnemyType
    -behavior: EnemyBehavior
    +setBehavior(behavior: EnemyBehavior): void
    +performAction(): void
    +abstract attack(): void
    +clone(): IEnemy
}

abstract class IEnemyFactory {
    +abstract createIEnemy(): IEnemy
}

class ZombieFactory {
    +createIEnemy(): IEnemy
}

class VampireFactory {
    +createIEnemy(): IEnemy
}

class WerewolfFactory {
    +createIEnemy(): IEnemy
}

IEnemy <|-- Zombie
IEnemy <|-- Vampire
IEnemy <|-- Werewolf

IEnemyFactory <|-- ZombieFactory
IEnemyFactory <|-- VampireFactory
IEnemyFactory <|-- WerewolfFactory

IEnemyFactory ..> IEnemy : creates

abstract class SpellFactory {
    {abstract} +createSpell(name: string, damage: int): ISpell
}

interface ISpell {
    +name
    +damage
    +cast()
    +render()   
}

class MageSpell {
    +name
    +damage
    +cast()
    +render()  
}

class HunterSpell {
    +name
    +damage
    +cast()
    +render()  
}

class FighterSpell {
    +name
    +damage
    +cast()
    +render()  
}

class HunterSpellFactory {
    +createSpell(name: string, damage: int): ISpell
}

class MageSpellFactory  {
    +createSpell(name: string, damage: int): ISpell
}

class FighterSpellFactory  {
    +createSpell(name: string, damage: int): ISpell
}

SpellFactory .left.> ISpell : creates

SpellFactory <|-right- HunterSpellFactory
SpellFactory <|-up- MageSpellFactory
SpellFactory <|-down- FighterSpellFactory

ISpell <|.up. MageSpell
ISpell <|.up. HunterSpell
ISpell <|.up. FighterSpell


abstract class WeaponFactory {
    {abstract} +createWeapon() : IWeapon
}


class Sword implements IWeapon {
    + physicalDamage : int
    + magicalDamage : int
    + criticalRate : int
    + attackSpeed : int
    -strategy: ShootingStrategy
    + attack1()
    + attack2()
    +setStrategy(strategy: ShootingStrategy): void
    +shoot(): void
}

class Bow implements IWeapon {
    + physicalDamage : int
    + magicalDamage : int
    + criticalRate : int
    + attackSpeed : int
    -strategy: ShootingStrategy
    + attack1()
    + attack2()
    +setStrategy(strategy: ShootingStrategy): void
    +shoot(): void
}

class Wand implements IWeapon {
    + physicalDamage : int
    + magicalDamage : int
    + criticalRate : int
    + attackSpeed : int
    -strategy: ShootingStrategy
    + attack1()
    + attack2()
    +setStrategy(strategy: ShootingStrategy): void
    +shoot(): void
}

class SwordFactory extends WeaponFactory {
    +createWeapon(): IWeapon
}

class BowFactory extends WeaponFactory {
    +createWeapon(): IWeapon
}

class WandFactory extends WeaponFactory {
    +createWeapon(): IWeapon
}

WeaponFactory ..> IWeapon : creates


class EnemyType {
    - name: String
    - speed: int
    - health: int
    - damage: int
    - sprite: String
    + EnemyType(name: String, speed: int, health: int, damage: int, sprite: String)
    + attack(): void
}

class EnemyFlyweightFactory {
    - enemyTypes: EnemyType[]
    + getEnemyType(name: String, speed: int, health: int, damage: int, sprite: String): EnemyType
}

class GameWorld {
    - enemies: IEnemy[]
    + addEnemy(x: int, y: int, name: String, speed: int, health: int, damage: int, sprite: String): void
    + render(): void
}

EnemyFlyweightFactory o--> EnemyType
GameWorld o--> IEnemy
GameWorld --> EnemyFlyweightFactory
Zombie --> EnemyType
Werewolf --> EnemyType
Vampire --> EnemyType

interface Mediator {
    + notify(sender: Object, event: String): void
}

class ConcreteMediator implements Mediator {
    - combatSystem: CombatSystem
    - lootSystem: LootSystem
    - notificationSystem: NotificationSystem
    + setCombatSystem(cs: CombatSystem): void
    + setLootSystem(ls: LootSystem): void
    + setNotificationSystem(ns: NotificationSystem): void
    + notify(sender: Object, event: String): void
}

class CombatSystem {
    - mediator: Mediator
    + CombatSystem(m: Mediator): void
    + attack(): void
}

class LootSystem {
    - mediator: Mediator
    + LootSystem(m: Mediator): void
    + generateLoot(): void
}

class NotificationSystem {
    - mediator: Mediator
    + NotificationSystem(m: Mediator): void
    + displayNotification(message: String): void
}

ConcreteMediator *--> CombatSystem
ConcreteMediator *--> LootSystem
ConcreteMediator *--> NotificationSystem

CombatSystem --> Mediator : notify(sender, "attack")
LootSystem --> Mediator : notify(sender, "lootGenerated")
NotificationSystem --> Mediator : notify(sender, "displayNotification")


class Game {
    - state: String
    + setState(state: String)
    + save(): GameMemento
    + restore(m: GameMemento)
}

class GameMemento {
    - state: String
    + GameMemento(state: String)
    + getState(): String
}

class Character {
    - state: String
    + setState(state: String)
    + save(): PlayerMemento
    + restore(m: PlayerMemento)
}

Character +-- PlayerMemento : inner class
Game +-- GameMemento : inner class 

class PlayerMemento {
    - state: String
    + PlayerMemento(state: String)
    + getState(): String
}

class Caretaker {
    - game: Game
    - player: Character
    - gameHistory: List<GameMemento>
    - playerHistory: List<PlayerMemento>
    + saveGameState()
    + savePlayerState()
    + undoGameState()
    + undoPlayerState()
}

Game --> GameMemento
Character --> PlayerMemento
Caretaker --> Game
Caretaker --> Character
Caretaker o--> GameMemento
Caretaker o--> PlayerMemento


interface ISubscriber {
    + update(event: String, context: Object): void
}

class GameEventPublisher {
    - subscribers: ISubscriber[]
    + subscribe(subscriber: ISubscriber): void
    + unsubscribe(subscriber: ISubscriber): void
    + notifySubscribers(event: String, context: Object): void
    + changeState(event: String, context: Object): void
}

class EquipmentSystem implements ISubscriber {
    + update(event: String, context: Object): void
}

class CharacterSystem implements ISubscriber {
    + update(event: String, context: Object): void
}

class EnemySystem implements ISubscriber {
    + update(event: String, context: Object): void
}

GameEventPublisher o--> ISubscriber


class IEnemyRegistry {
    -enemies: IEnemy[]
    +addIEnemy(id: string, IEnemy: IEnemy): void
    +getIEnemyById(id: string): IEnemy
}

interface IEnemy {
    +attack(): void
    +clone(): IEnemy
    -behavior: EnemyBehavior
    +setBehavior(behavior: EnemyBehavior): void
    +performAction(): void
}

IEnemyRegistry o--> IEnemy : prototype

note right of IEnemy::clone
Deep copy for the clone
end note


interface IConfiguration {
    + getConfig(key: String): String
    + setConfig(key: String, value: String): void
}

class JSONConfigManager implements IConfiguration {
    - static instance: JSONConfigManager
    - config: Map<String, String>
    + getInstance(): JSONConfigManager
    + getConfig(key: String): String
    + setConfig(key: String, value: String): void
}

class ConfigurationProxy implements IConfiguration {
    - realConfig: JSONConfigManager
    + ConfigurationProxy()
    + checkAccess(): Boolean
    + getConfig(key: String): String
    + setConfig(key: String, value: String): void
}


ConfigurationProxy --> JSONConfigManager


class JSONConfigManager {
    -instance: JSONConfigManager
    -jsonData: String
    -JSONConfigManager()
    +getInstance(): JSONConfigManager
    +loadDataFromDisk(): void
    +saveDataToDisk(): void
    +getData(): String
    +setData(data: String): void
}

JSONConfigManager --> JSONConfigManager

class Context {
    - state: State
    + Context(initialState: State)
    + setState(state: State): void
    + performAction(): void
}

interface State {
    + performAction(): void
}

class NormalState implements State {
    + performAction(): void
}

class PoisonedState implements State {
    + performAction(): void
}

class EnragedState implements State {
    + performAction(): void
}

Context o--> State


class LevelContext {
    - state: LevelState
    + LevelContext(initialState: LevelState)
    + setState(state: LevelState): void
    + update(): void
}

interface LevelState {
    + update(): void
}

class ExplorationState implements LevelState {
    + update(): void
}

class CombatState implements LevelState {
    + update(): void
}

class BossState implements LevelState {
    + update(): void
}

LevelContext o--> LevelState


interface EnemyBehavior {
    +execute(): void
}

class AttackBehavior implements EnemyBehavior {
    +execute(): void
}

class FleeBehavior implements EnemyBehavior {
    +execute(): void
}

class PatrolBehavior implements EnemyBehavior {
    +execute(): void
}
 
Vampire o--> EnemyBehavior
Werewolf o--> EnemyBehavior
Zombie o--> EnemyBehavior

interface ShootingStrategy {
    +shoot(): void
}

class StraightShooting implements ShootingStrategy {
    +shoot(): void
}

class FanShooting implements ShootingStrategy {
    +shoot(): void
}

Bow o--> ShootingStrategy
Sword o--> ShootingStrategy
Wand o--> ShootingStrategy


abstract class LevelGenerator {
    +generateLevel(): void
    + {abstract} generateTerrain(): void
    + {abstract} generateEnemies(): void
    + {abstract} generateItems(): void
    + {abstract} generateRocks(): void

}

class CaveLevelGenerator {
    +generateTerrain(): void
    +generateEnemies(): void
    +generateItems(): void
    +generateRocks(): void
}

class DungeonLevelGenerator {
    +generateTerrain(): void
    +generateEnemies(): void
    +generateItems(): void
}

LevelGenerator <|-- CaveLevelGenerator
LevelGenerator <|-- DungeonLevelGenerator

@enduml
