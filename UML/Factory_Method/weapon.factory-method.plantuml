@startuml

abstract class WeaponFactory {
    {abstract} +createWeapon() : IWeapon
}

interface IWeapon {
    + attack1()
    + attack2()
}

class Sword implements IWeapon {
    + physicalDamage : int
    + magicalDamage : int
    + criticalRate : int
    + attackSpeed : int
    -strategy: ShootingStrategy
    + attack1()
    + attack2()
    +setStrategy(strategy: ShootingStrategy): void
    +shoot(): void
}

class Bow implements IWeapon {
    + physicalDamage : int
    + magicalDamage : int
    + criticalRate : int
    + attackSpeed : int
    -strategy: ShootingStrategy
    + attack1()
    + attack2()
    +setStrategy(strategy: ShootingStrategy): void
    +shoot(): void
}

class Wand implements IWeapon {
    + physicalDamage : int
    + magicalDamage : int
    + criticalRate : int
    + attackSpeed : int
    -strategy: ShootingStrategy
    + attack1()
    + attack2()
    +setStrategy(strategy: ShootingStrategy): void
    +shoot(): void
}

class SwordFactory extends WeaponFactory {
    +createWeapon(): IWeapon
}

class BowFactory extends WeaponFactory {
    +createWeapon(): IWeapon
}

class WandFactory extends WeaponFactory {
    +createWeapon(): IWeapon
}

WeaponFactory ..> IWeapon : creates

@enduml