@startuml
hide footbox

class OrcHunter implements IHunter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class HumanHunter implements IHunter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class ElfHunter implements IHunter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class OrcMage implements IMage{
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class HumanMage implements IMage {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class ElfMage implements IMage {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class OrcFighter implements IFighter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class HumanFighter implements IFighter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

class ElfFighter implements IFighter {
    -strength: int
    -agility: int
    -spells: ISpell[]
    -equipments: IEquipment[]
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

interface ICharacter {
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
}

abstract class CharacterDecorator implements ICharacter {
    protected -decoratedCharacter: ICharacter
    +CharacterDecorator(character: ICharacter)
    +attack(damage: int, target: IEnemy)
    +move(speed: int, direction: Direction)
    +useItem(item: Item)
}

class FirePowerDecorator extends CharacterDecorator {
    +FirePowerDecorator(character: ICharacter)
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
    +addFirePower(): void
}

class InvisibilityDecorator extends CharacterDecorator {
    +InvisibilityDecorator(character: ICharacter)
    + attack(damage: int, target: IEnemy)
    + move(speed: int, direction: Direction)
    + useItem(item: Item)
    +addInvisibility(): void
}

CharacterDecorator *--> ICharacter

HumanHunter ..> ICharacter
HumanMage ..> ICharacter
HumanFighter ..> ICharacter

OrcHunter ..> ICharacter
OrcMage ..> ICharacter
OrcFighter ..> ICharacter

ElfHunter ..> ICharacter
ElfMage ..> ICharacter
ElfFighter ..> ICharacter

@enduml
